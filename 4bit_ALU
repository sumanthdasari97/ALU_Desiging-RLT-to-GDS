module ALU_4bit (
    input [3:0] A,        // 4-bit input A
    input [3:0] B,        // 4-bit input B
    input [2:0] ALU_Sel,  // ALU operation select
    output reg [3:0] ALU_Out, // 4-bit ALU output
    output reg Carry_Out  // Carry output
);

always @(*) begin
    case(ALU_Sel)
        3'b000: {Carry_Out, ALU_Out} = A + B;          // Addition
        3'b001: {Carry_Out, ALU_Out} = A - B;          // Subtraction
        3'b010: begin
            ALU_Out = A & B;                           // AND
            Carry_Out = 1'b0;                          // No carry for AND
        end
        3'b011: begin
            ALU_Out = A | B;                           // OR
            Carry_Out = 1'b0;                          // No carry for OR
        end
        3'b100: begin
            ALU_Out = A ^ B;                           // XOR
            Carry_Out = 1'b0;                          // No carry for XOR
        end  
        3'b101: begin
            ALU_Out = ~(A | B);                        // NOR
            Carry_Out = 1'b0;                          // No carry for NOR
        end
        3'b110: begin
            ALU_Out = A;                               // Transfer A
            Carry_Out = 1'b0;                          // No carry for transfer
        end
        3'b111: begin
            ALU_Out = B;                               // Transfer B
            Carry_Out = 1'b0;                          // No carry for transfer
        end
        default: begin
            ALU_Out = 4'b0000;
            Carry_Out = 1'b0;                          // No carry for default case
        end
    endcase
end

endmodule
